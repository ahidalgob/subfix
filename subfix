#!/usr/bin/env python3
import re
import sys, os
import argparse
import subprocess, tempfile

import magic

import time
import threading
import itertools

import credentials

import json
from watson_developer_cloud import SpeechToTextV1

MAX_SHIFT = 20000000000 * 60 * 1000
INTERVAL_LENGTH = 60*1000 -2
AUDIO_FORMAT = 'ogg'

def to_ms(h, m, s, ms):
    ms = ms[:3]
    while len(ms) < 3:
        ms = ms+'0'
    return int(ms) + int(s)*1000 + int(m)*60*1000 + int(h)*60*60*1000

def to_hmsms(tot, ms_separator=','):
    def fix_len(s, l):
        while len(s) < l:
            s = '0'+s
        return s
    ms = str(tot%1000)
    tot = tot//1000
    s = str(tot%60)
    tot = tot//60
    m = str(tot%60)
    h = str(tot//60)
    ms = fix_len(ms, 3)
    s = fix_len(s, 2)
    m = fix_len(m, 2)
    h = fix_len(h, 2)
    return h+':'+m+':'+s+ms_separator+ms

########### Returns a function that shifts d milliseconds the 
# given matched subtitles.
def shift(d):
    def internal_shift(match):
        subN, h1, m1, s1, ms1, h2, m2, s2, ms2, txt = \
            match.group('subN', 'h1', 'm1', 's1', 'ms1', \
                            'h2', 'm2', 's2', 'ms2', 'txt')
        if subN is None:
            subN = ''
        else:
            subN = subN + '\n'
        ret = subN + to_hmsms(to_ms(h1,m1,s1,ms1)+d) + ' --> ' \
                + to_hmsms(to_ms(h2,m2,s2,ms2)+d) + '\n' + txt
        return ret
    return internal_shift

subtitle_regex = re.compile(r"""
    ((?P<subN>\d+)\n)?
    (?P<first_time>(?P<h1>\d+):
    (?P<m1>\d+):
    (?P<s1>\d+),
    (?P<ms1>\d+))
    \s+ --> \s+
    (?P<h2>\d+):
    (?P<m2>\d+):
    (?P<s2>\d+),
    (?P<ms2>\d+)\n
    (?P<txt>.*? (?=\n*((\d+\n)?\d+:\d+:\d+,\d+ \s+ --> \s+ \d+:\d+:\d+,\d+)|\Z))
    """, re.VERBOSE | re.MULTILINE | re.DOTALL)

time_regex = re.compile(r"""
    (?P<h1>\d+):
    (?P<m1>\d+):
    (?P<s1>\d+)[,.]
    (?P<ms1>\d+)
    """, re.VERBOSE | re.MULTILINE)


########### Simple Sync
# Asks for a subtitle frame to use as a sync point and then asks for the
# desired time for such frame.
# Returns the desired shift
def simple_sync(all_matches):
    # tmp_file is used to get the more/less behavior
    tmp_file = open(tempfile.mkstemp()[1], 'w')

    for i,match in enumerate(all_matches):
        print(i+1, ': ', match.group('txt').replace('\n',' '), 
                '\n', sep=' ', file=tmp_file)

    ########### GET THE SUBTITLE TO SYNC
    print('Look for the number of the subtitle frame you want to use to',
        'sync and then press \'q\'')
    input('(Press enter to continue)')

    tmp_file.flush()
    subprocess.run(['less', tmp_file.name])
    tmp_file.close()

    selected_match = None
    while selected_match is None:
        try:
            i = int(input('Frame number: '))-1
            assert(0 <= i < len(all_matches))
            selected_match = all_matches[i]
        except KeyboardInterrupt:
            sys.exit(0)
        except:
            print('Invalid frame number.')
    ############################################


    ########### GET THE DESIRED TIME
    print("\nInsert the desired time for:\n   "
            +selected_match.group('txt').replace('\n',' '))
    print("\n(Currently at time "+ selected_match.group('first_time') +")")
    print("Please insert the desired time in the following format:\n\
    hours:minutes:seconds,milliseconds")

    desired = None
    while desired is None:
        desired = time_regex.match(input('Desired time: '))
        if desired is None:
            print('Invalid format, YOU CAN DO IT!.')
    ############################################

    hi, mi, si, msi = selected_match.group('h1', 'm1', 's1', 'ms1')
    hf, mf, sf, msf = desired.group('h1', 'm1', 's1', 'ms1')
    return to_ms(hf, mf, sf, msf) - to_ms(hi, mi, si, msi)


## TO-DO: Fix the workaraound with the failing threads.

#######################################################
########### Amazing Scan
#######################################################
def transcription_thread(audio_file, words, stt, start_time):
    try:
        with open(audio_file.name, 'rb') as audio_file: # TESTING
            transcription = stt.recognize(
                audio_file,
                content_type='audio/'+ AUDIO_FORMAT,
                timestamps=True,
                word_confidence=True,
                model='en-US_NarrowbandModel',
                # model='en-US_BroadbandModel',
                # word_alternatives_threshold=0.3,
                # keywords={"math"}, keywords_threshold=0.4,
                # max_alternatives=5
                )
        audio_file.close()
        transcription = transcription['results']
    except:
        words.append(None) # fix this, do it right
        return

    for prt in transcription:
        bst = prt['alternatives'][0]
        for i in range(len(bst['timestamps'])):
            words.append({'word':bst['timestamps'][i][0].lower(),
                        'start':int(bst['timestamps'][i][1]*1000)+start_time,
                        'middle':int(bst['timestamps'][i][2]*1000)+start_time,
                        'confidence':bst['word_confidence'][i][1]})

def get_transcription(movie_filename):

    # Get length of file
    result = subprocess.run(['ffmpeg -i \"' + movie_filename +
        '\" 2>&1 | grep \"Duration\"| cut -d \' \' -f 4 | sed s/,//'], \
        stdout=subprocess.PIPE, shell=True)
    length_match = time_regex.match(result.stdout.decode('utf-8'))
    th, tm, ts, tms = length_match.group('h1', 'm1', 's1', 'ms1')
    total_length = to_ms(th, tm, ts, tms) - 15
    
    
    cuts = 0
    tmp_audio_file = []
    words = []
    start = []
    length = []

    if total_length <= 60*1000: # less or equal to a minute
        cur_time = 0
        while cur_time < total_length:
            tmp_audio_file.append(None)
            words.append([])
            start.append(cur_time)
            length.append(min(20*1000, total_length - cur_time))
            cuts += 1
            cur_time += 20*1000
    else:
        cuts = 5
        if total_length > 15*60*1000:
            cuts = 10
        tmp_audio_file = [None for i in range(cuts)]
        words = [[] for i in range(cuts)]
        length = [12*1000 for i in range(cuts)]
        start = [(total_length//cuts)*i for i in range(cuts)]

    ########### Rips audio from video
    process = []
    print('Getting audio.')
    for i in range(cuts):
        # print(i, cuts)
        # print(to_hmsms(start[i]), to_hmsms(length[i]))
        tmp_audio_file[i] = tempfile.NamedTemporaryFile(suffix='.'+AUDIO_FORMAT)
        p = subprocess.Popen(['yes | ffmpeg -i \"' + movie_filename +'\"'
            +' -vn -ss ' + to_hmsms(start[i], '.')
            + ' -t ' + to_hmsms(length[i], '.') + ' \"'+ tmp_audio_file[i].name + '\"'], 
            stdout=open(os.devnull, "w"), stderr=subprocess.STDOUT, 
            shell=True)
        process.append(p)
    
    for p in process:
        p.wait()
    ############################################


    print('Getting transcription (chatting with watson).')

    speech_to_text = SpeechToTextV1(
        username=credentials.USERNAME,
        password=credentials.PASSWORD,
        x_watson_learning_opt_out=False
    )

    threads = []

    for i in range(cuts):
        t = threading.Thread(target=transcription_thread, 
        args= (tmp_audio_file[i], words[i], speech_to_text, start[i],))
        threads.append(t)
        t.start()

    for t in threads:
        t.join()

    for i in range(cuts):
        if len(words[i]) == 1 and words[i][0] is None:
            sys.exit('Failed to connect with watson, check internet connection and credentials.\n'\
            +'Credentials should be in a file named credentials.py in the root directory and'\
            +'should contain only two string variables USERNAME and PASSWORD.')

    return list(itertools.chain.from_iterable(words))



########### Finds the best shift.
#    frames is a list of dictionary objects, each one with fields:
#        start: time of start, in milliseconds
#        end: time of end, in milliseconds
#        words: list of words in the frame
#
#    trans_words is a list of dictionary objects, each one with fields:
#        start: time of start, in milliseconds
#        middle: time of middle, in milliseconds
#        word: the actual word
#        confidence: confidence of the transcription, double between 0 and 1
#   Both lists must be ordered according to the times for this
#   function to be correct
def get_best_shift(frames, trans_words, with_BS=True):

    # memo: memoization for function get_frame_score
    # seen_shift: set of already tried shifts (rounded to first decimal)
    memo, seen_shift = {}, set()

    # gets score of the match between the words of frame f from word fw to the end
    #   and the next ntw words of transwords, starting at tw
    def get_frame_score(f, fw, tw, ntw):
        if fw == len(frames[f]['words']) and ntw==0:
            return 0
        if (f, fw, tw, ntw) in memo:
            return memo[(f, fw, tw, ntw)]
        ret = 0
        if fw!=len(frames[f]['words']):
            ret = max(ret, get_frame_score(f, fw+1, tw, ntw))
        if ntw !=0:
            ret = max(ret,  get_frame_score(f, fw, tw+1, ntw-1))
        if fw!=len(frames[f]['words']) and ntw !=0 and \
                    frames[f]['words'][fw] == trans_words[tw]['word']:
            ret = max(ret, get_frame_score(f, fw+1, tw+1, ntw-1) + \
                        1+trans_words[tw]['confidence'])
        memo[(f,fw,tw,ntw)] = ret
        return ret

    # s = shift: final-initial times of the frames
    def get_shift_score(s):
        total_score = 0
        seen_shift.add(s//100)

        i, j = 0, 0
        while i<len(frames) and j<len(trans_words):
            # if the next frame is before the next transc word,
            # go quickly (bin. search) to the next relevant frame.
            if frames[i]['end'] + s < trans_words[j]['middle']:
                lo, hi = i, len(frames) -1
                while lo < hi:
                    mi = (lo+hi+1)//2
                    start = frames[mi]['start'] + s
                    if start > trans_words[j]['middle']:
                        hi = mi-1
                    else:
                        lo = mi
                i = lo

            frame_start = frames[i]['start'] + s
            frame_end = frames[i]['end'] + s

            # skip all transc words before the current frame
            while j<len(trans_words) and trans_words[j]['middle'] < frame_start:
                total_score -= trans_words[j]['confidence']
                j += 1

            if j<len(trans_words) and trans_words[j]['middle'] <= frame_end:
                first = j
                while j<len(trans_words) and \
                        frame_start <= trans_words[j]['middle'] <= frame_end:
                    j += 1
                total_score += get_frame_score(i, 0, first, j-first)
            i += 1
        return total_score

    score = -1
    best_shift = 0
    # Try all possible shifts
    for i,fr in enumerate(frames):
        for j,tw in enumerate(trans_words):
            current_shift = tw['start'] - fr['start']
            if current_shift//100 not in seen_shift:
                nscore = get_shift_score(current_shift)
                if nscore > score:
                    score = nscore
                    best_shift = current_shift

    return best_shift

def amazing_sync(all_matches, movie_filename):
    # TO DO: Determine the audio interval we want to rip from the video

    video_ok = True
    try:
        if 'video' not in magic.from_file(movie_filename, mime=True):
            video_ok = False
    except:
        sys.exit('Error: The movie file doesn\'t exists or cannot be opened D:')

    if not video_ok:
        sys.exit('Error: The movie file is not a video file D:')


    frames = []
    for match in all_matches:
        h1, m1, s1, ms1, h2, m2, s2, ms2, txt = \
            match.group('h1', 'm1', 's1', 'ms1', \
                        'h2', 'm2', 's2', 'ms2', 'txt')
        start, end = to_ms(h1, m1, s1, ms1), to_ms(h2, m2, s2, ms2)
        # if end < start_time-MAX_SHIFT \
        #     or start > start_time + INTERVAL_LENGTH + MAX_SHIFT:
        #     continue
        frames.append({'start': start,
                        'end': end,
                        'words': re.sub('[!?,.♪\[\]]','',txt.lower()).split()})

    trans_words = get_transcription(movie_filename)

    print('Magic\'s happening.')

    # start_time = time.time()
    # get_best_shift(frames, trans_words)
    # print("--- %s seconds ---" % (time.time() - start_time))

    return get_best_shift(frames, trans_words)

########### MAIN
if __name__ == '__main__':
    # TO DO: Better help and instructions.
    ########### Parsing arguments
    parser = argparse.ArgumentParser(description='Subtitles syncer.')

    parser.add_argument('srt_file', help='The srt file to sync.')
    parser.add_argument('movie_file', nargs='?',
        help='The movie file that will be used to sync the srt file.')

    args = parser.parse_args()
    filename, movie_filename = args.srt_file, args.movie_file

    try:
        with open(filename, 'r') as myfile:
            subtitles_text = myfile.read()
    except:
        sys.exit("Error: the srt file doesn't exists or couldn't be opened D:\n")
    ############################################

    ########### Parsing srt file
    matches_iterator = subtitle_regex.finditer(subtitles_text)
    
    all_matches = []
    for match in matches_iterator:
        all_matches.append(match)

    if len(all_matches)==0:
        sys.exit("Error: the file isn't a valid str file D:\n")
    ############################################

    if movie_filename is None:
        dif = simple_sync(all_matches)
    else:
        dif = amazing_sync(all_matches, movie_filename)

    subtitles_text = subtitle_regex.sub(shift(dif), subtitles_text)

    confirm = None
    while confirm is None:
        print('The srt file will be OVERWRITTEN. [Y/n]')
        confirm = input()
        if confirm == 'Y':
            pass
        elif confirm == 'n':
            print('Canceled.')
            sys.exit(0)
        else:
            print('Invalid option')
            confirm = None
    with open(filename, 'w') as myfile:
        myfile.write(subtitles_text)
    print('Done :)')